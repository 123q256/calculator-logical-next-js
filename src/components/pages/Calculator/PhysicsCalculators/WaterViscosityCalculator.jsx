import React, { useEffect, useState } from "react";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  LineElement,
  CategoryScale,
  LinearScale,
  PointElement,
  Legend,
  Tooltip,
} from "chart.js";

ChartJS.register(
  LineElement,
  CategoryScale,
  LinearScale,
  PointElement,
  Legend,
  Tooltip
);

import {
  Breadcrumbs,
  CalculatorTitle,
  CalculatorWrap,
  RightSideCalculator,
  LeftSideCalculator,
  RelatedLinks,
  FormWrap,
} from "../../../components/Calculator";
import { useLocation } from "react-router-dom";
// import {
//   useGetSingleCalculatorDetailsMutation,
//   useWaterViscosityCalculatorMutation,
// } from "../../../redux/services/calculator/calculatorApi";

import { useGetSingleCalculatorDetailsMutation } from "../../../redux/services/calculator/calculatorApi";

import { useWaterViscosityCalculatorMutation } from "../../../redux/services/datecalculator/dateCalculatorApi";

import { toast } from "react-toastify";
import ResultActions from "../../../components/Calculator/ResultActions";
import CalculatorFeedback from "../../../components/Calculator/CalculatorFeedback";
import Calculator from "../Calculator";
import { getUserCurrency } from "../../../components/Calculator/GetCurrency"; //currency import class
import Button from "../../../components/Calculator/Button";
import ResetButton from "../../../components/Calculator/ResetButton";

const WaterViscosityCalculator = () => {
  const location = useLocation();
  const url = location.pathname.replace(/^\/+/, "");
  const [getSingleCalculatorDetails, { data, error, isLoading }] =
    useGetSingleCalculatorDetailsMutation();
  const handleFetchDetails = async () => {
    try {
      // Call the mutation with the `tech_calculator_link`
      await getSingleCalculatorDetails({ tech_calculator_link: url });
    } catch (err) {
      console.error("Error fetching calculator details:", err);
    }
  };

  useEffect(() => {
    handleFetchDetails();
  }, [url]);

  const [formData, setFormData] = useState({
    tech_temp: "245",
    tech_unit: "c", //  c   f  k
  });

  const [result, setResult] = useState(null);
  const [formError, setFormError] = useState("");

  // RTK mutation hook
  const [
    calculateEbitCalculator,
    { isLoading: roundToTheNearestLoading, isError, error: calculateLoveError },
  ] = useWaterViscosityCalculatorMutation();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
    setResult(null);
    setFormError(null);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.tech_temp || !formData.tech_unit) {
      setFormError("Please fill in input.");
      return;
    }

    setFormError("");
    try {
      const response = await calculateEbitCalculator({
        tech_temp: formData.tech_temp,
        tech_unit: formData.tech_unit,
      }).unwrap();
      setResult(response); // Assuming the response has 'lovePercentage'
      toast.success("Successfully Calculated");
    } catch (err) {
      setFormError(err.data.error);
      toast.error(err.data.error);
    }
  };

  // Handle reset form
  const handleReset = () => {
    setFormData({
      tech_temp: "245",
      tech_unit: "c", //  c   f  k
    });
    setResult(null);
    setFormError(null);
  };
  // currency code
  const [currency, setCurrency] = useState({
    code: "USD",
    symbol: "$",
    name: "US Dollar",
  });

  useEffect(() => {
    const fetchCurrency = async () => {
      const result = await getUserCurrency();
      if (result) {
        setCurrency(result);
      }
    };

    fetchCurrency();
  }, []);
  // currency code

  //dropdown states
  const [dropdownVisible, setDropdownVisible] = useState(false);

  const setUnitHandler = (unit) => {
    setFormData((prev) => ({ ...prev, tech_unit: unit }));
    setDropdownVisible(false);
  };

  const toggleDropdown = () => {
    setDropdownVisible(!dropdownVisible);
  };

  // chart

  const labels = Array.from({ length: 126 }, (_, i) => i); // 0 to 125 (your X axis)

  const viscosityData = [
    [0, 1.788, 1.789, 0.9999],
    [1, 1.73075, 1.7313, 0.9999],
    [2, 1.6735, 1.6736, 0.9999],
    [3, 1.619, 1.6191, 1],
    [4, 1.5673, 1.5674, 1],
    [5, 1.5182, 1.5182, 1],
    [6, 1.4715, 1.4716, 0.9999],
    [7, 1.4271, 1.4272, 0.9999],
    [8, 1.3847, 1.3849, 0.9999],
    [9, 1.3444, 1.3447, 0.9998],
    [10, 1.3059, 1.3063, 0.9997],
    [11, 1.2692, 1.2696, 0.9996],
    [12, 1.234, 1.2347, 0.9995],
    [13, 1.2005, 1.2012, 0.9994],
    [14, 1.1683, 1.1692, 0.9992],
    [15, 1.1375, 1.1386, 0.9991],
    [16, 1.1081, 1.1092, 0.9989],
    [17, 1.0798, 1.0811, 0.9988],
    [18, 1.0526, 1.0541, 0.9986],
    [19, 1.0266, 1.0282, 0.9984],
    [20, 1.0016, 1.0034, 0.9982],
    [21, 0.9775, 0.9795, 0.998],
    [22, 0.9544, 0.9565, 0.9978],
    [23, 0.9321, 0.9344, 0.9975],
    [24, 0.9107, 0.9131, 0.9973],
    [25, 0.89, 0.8926, 0.997],
    [26, 0.8701, 0.8729, 0.9968],
    [27, 0.8509, 0.8539, 0.9965],
    [28, 0.8324, 0.8355, 0.9962],
    [29, 0.8145, 0.8178, 0.9959],
    [30, 0.7972, 0.8007, 0.9956],
    [31, 0.7805, 0.7842, 0.9953],
    [32, 0.7644, 0.7682, 0.995],
    [33, 0.7488, 0.7528, 0.9947],
    [34, 0.7337, 0.7379, 0.9944],
    [35, 0.7191, 0.7234, 0.994],
    [36, 0.705, 0.7095, 0.9937],
    [37, 0.6913, 0.6959, 0.9933],
    [38, 0.678, 0.6828, 0.993],
    [39, 0.6652, 0.6702, 0.9926],
    [40, 0.6527, 0.6579, 0.9922],
    [41, 0.64132, 0.64666, 0.9918],
    [42, 0.62994, 0.63542, 0.9914],
    [43, 0.61856, 0.62418, 0.991],
    [44, 0.60718, 0.61294, 0.9906],
    [45, 0.5958, 0.6017, 0.9902],
    [46, 0.58594, 0.59198, 0.98976],
    [47, 0.57608, 0.58226, 0.98932],
    [48, 0.56622, 0.57254, 0.98888],
    [49, 0.55636, 0.56282, 0.98844],
    [50, 0.5465, 0.5531, 0.988],
    [51, 0.53792, 0.54466, 0.98754],
    [52, 0.52934, 0.53622, 0.98708],
    [53, 0.52076, 0.52778, 0.98662],
    [54, 0.51218, 0.51934, 0.98616],
    [55, 0.5036, 0.5109, 0.9857],
    [56, 0.49608, 0.50352, 0.9852],
    [57, 0.48856, 0.49614, 0.9847],
    [58, 0.48104, 0.48876, 0.9842],
    [59, 0.47352, 0.48138, 0.9837],
    [60, 0.466, 0.474, 0.9832],
    [61, 0.45938, 0.4675, 0.98268],
    [62, 0.45276, 0.461, 0.98216],
    [63, 0.44614, 0.4545, 0.98164],
    [64, 0.43952, 0.448, 0.98112],
    [65, 0.4329, 0.4415, 0.9806],
    [66, 0.42702, 0.43574, 0.98004],
    [67, 0.42114, 0.42998, 0.97948],
    [68, 0.41526, 0.42422, 0.97892],
    [69, 0.40938, 0.41846, 0.97836],
    [70, 0.4035, 0.4127, 0.9778],
    [71, 0.39828, 0.4076, 0.9772],
    [72, 0.39306, 0.4025, 0.9766],
    [73, 0.38784, 0.3974, 0.976],
    [74, 0.38262, 0.3923, 0.9754],
    [75, 0.3774, 0.3872, 0.9748],
    [76, 0.37272, 0.38262, 0.9742],
    [77, 0.36804, 0.37804, 0.9736],
    [78, 0.36336, 0.37346, 0.973],
    [79, 0.35868, 0.36888, 0.9724],
    [80, 0.354, 0.3643, 0.9718],
    [81, 0.35009, 0.36047, 0.97115],
    [82, 0.34618, 0.35664, 0.9705],
    [83, 0.34227, 0.35281, 0.96985],
    [84, 0.33836, 0.34898, 0.9692],
    [85, 0.33445, 0.34515, 0.96855],
    [86, 0.33054, 0.34132, 0.9679],
    [87, 0.32663, 0.33749, 0.96725],
    [88, 0.32272, 0.33366, 0.9666],
    [89, 0.31881, 0.32983, 0.96595],
    [90, 0.3149, 0.326, 0.9653],
    [91, 0.31166, 0.3229, 0.96461],
    [92, 0.30842, 0.3198, 0.96392],
    [93, 0.30518, 0.3167, 0.96323],
    [94, 0.30194, 0.3136, 0.96254],
    [95, 0.2987, 0.3105, 0.96185],
    [96, 0.29546, 0.3074, 0.96116],
    [97, 0.29222, 0.3043, 0.96047],
    [98, 0.28898, 0.3012, 0.95978],
    [99, 0.28574, 0.2981, 0.95909],
    [100, 0.2825, 0.295, 0.9584],
    [101, 0.281118181818182, 0.293709090909091, 0.95744],
    [102, 0.279736363636364, 0.292418181818182, 0.95648],
    [103, 0.278354545454545, 0.291127272727273, 0.95552],
    [104, 0.276972727272727, 0.289836363636364, 0.95456],
    [105, 0.275590909090909, 0.288545454545455, 0.9536],
    [106, 0.274209090909091, 0.287254545454545, 0.95264],
    [107, 0.272827272727273, 0.285963636363636, 0.95168],
    [108, 0.271445454545455, 0.284672727272727, 0.95072],
    [109, 0.270063636363636, 0.283381818181818, 0.94976],
    [110, 0.268681818181818, 0.282090909090909, 0.9488],
    [111, 0.2673, 0.2808, 0.94784],
    [112, 0.265918181818182, 0.279509090909091, 0.94688],
    [113, 0.264536363636364, 0.278218181818182, 0.94592],
    [114, 0.263154545454545, 0.276927272727273, 0.94496],
    [115, 0.261772727272727, 0.275636363636364, 0.944],
    [116, 0.260390909090909, 0.274345454545455, 0.94304],
    [117, 0.259009090909091, 0.273054545454545, 0.94208],
    [118, 0.257627272727273, 0.271763636363636, 0.94112],
    [119, 0.256245454545454, 0.270472727272727, 0.94016],
    [120, 0.254863636363636, 0.269181818181818, 0.9392],
    [121, 0.253481818181818, 0.267890909090909, 0.93824],
    [122, 0.2521, 0.2666, 0.93728],
    [123, 0.250718181818182, 0.265309090909091, 0.93632],
    [124, 0.249336363636364, 0.264018181818182, 0.93536],
    [125, 0.247954545454545, 0.262727272727273, 0.9344],
    [126, 0.246572727272727, 0.261436363636364, 0.93344],
    [127, 0.245190909090909, 0.260145454545455, 0.93248],
    [128, 0.243809090909091, 0.258854545454545, 0.93152],
    [129, 0.242427272727273, 0.257563636363636, 0.93056],
    [130, 0.241045454545455, 0.256272727272727, 0.9296],
    [131, 0.239663636363636, 0.254981818181818, 0.92864],
    [132, 0.238281818181818, 0.253690909090909, 0.92768],
    [133, 0.2369, 0.2524, 0.92672],
    [134, 0.235518181818182, 0.251109090909091, 0.92576],
    [135, 0.234136363636364, 0.249818181818182, 0.9248],
    [136, 0.232754545454545, 0.248527272727273, 0.92384],
    [137, 0.231372727272727, 0.247236363636364, 0.92288],
    [138, 0.229990909090909, 0.245945454545455, 0.92192],
    [139, 0.228609090909091, 0.244654545454545, 0.92096],
    [140, 0.227227272727273, 0.243363636363636, 0.92],
    [141, 0.225845454545455, 0.242072727272727, 0.91904],
    [142, 0.224463636363636, 0.240781818181818, 0.91808],
    [143, 0.223081818181818, 0.239490909090909, 0.91712],
    [144, 0.2217, 0.2382, 0.91616],
    [145, 0.220318181818182, 0.236909090909091, 0.9152],
    [146, 0.218936363636364, 0.235618181818182, 0.91424],
    [147, 0.217554545454545, 0.234327272727273, 0.91328],
    [148, 0.216172727272727, 0.233036363636364, 0.91232],
    [149, 0.214790909090909, 0.231745454545455, 0.91136],
    [150, 0.213409090909091, 0.230454545454545, 0.9104],
    [151, 0.212027272727273, 0.229163636363636, 0.90944],
    [152, 0.210645454545455, 0.227872727272727, 0.90848],
    [153, 0.209263636363636, 0.226581818181818, 0.90752],
    [154, 0.207881818181818, 0.225290909090909, 0.90656],
    [155, 0.2065, 0.224, 0.9056],
    [156, 0.205118181818182, 0.222709090909091, 0.90464],
    [157, 0.203736363636364, 0.221418181818182, 0.90368],
    [158, 0.202354545454545, 0.220127272727273, 0.90272],
    [159, 0.200972727272727, 0.218836363636364, 0.90176],
    [160, 0.199590909090909, 0.217545454545455, 0.9008],
    [161, 0.198209090909091, 0.216254545454545, 0.89984],
    [162, 0.196827272727273, 0.214963636363636, 0.89888],
    [163, 0.195445454545455, 0.213672727272727, 0.89792],
    [164, 0.194063636363636, 0.212381818181818, 0.89696],
    [165, 0.192681818181818, 0.211090909090909, 0.896],
    [166, 0.1913, 0.2098, 0.89504],
    [167, 0.189918181818182, 0.208509090909091, 0.89408],
    [168, 0.188536363636364, 0.207218181818182, 0.89312],
    [169, 0.187154545454545, 0.205927272727273, 0.89216],
    [170, 0.185772727272727, 0.204636363636364, 0.8912],
    [171, 0.184390909090909, 0.203345454545455, 0.89024],
    [172, 0.183009090909091, 0.202054545454545, 0.88928],
    [173, 0.181627272727273, 0.200763636363636, 0.88832],
    [174, 0.180245454545455, 0.199472727272727, 0.88736],
    [175, 0.178863636363636, 0.198181818181818, 0.8864],
    [176, 0.177481818181818, 0.196890909090909, 0.88544],
    [177, 0.1761, 0.1956, 0.88448],
    [178, 0.174718181818182, 0.194309090909091, 0.88352],
    [179, 0.173336363636364, 0.193018181818182, 0.88256],
    [180, 0.171954545454545, 0.191727272727273, 0.8816],
    [181, 0.170572727272727, 0.190436363636364, 0.88064],
    [182, 0.169190909090909, 0.189145454545455, 0.87968],
    [183, 0.167809090909091, 0.187854545454545, 0.87872],
    [184, 0.166427272727273, 0.186563636363636, 0.87776],
    [185, 0.165045454545455, 0.185272727272727, 0.8768],
    [186, 0.163663636363636, 0.183981818181818, 0.87584],
    [187, 0.162281818181818, 0.182690909090909, 0.87488],
    [188, 0.1609, 0.1814, 0.87392],
    [189, 0.159518181818182, 0.180109090909091, 0.87296],
    [190, 0.158136363636364, 0.178818181818182, 0.872],
    [191, 0.156754545454545, 0.177527272727273, 0.87104],
    [192, 0.155372727272727, 0.176236363636364, 0.87008],
    [193, 0.153990909090909, 0.174945454545455, 0.86912],
    [194, 0.152609090909091, 0.173654545454545, 0.86816],
    [195, 0.151227272727273, 0.172363636363636, 0.8672],
    [196, 0.149845454545455, 0.171072727272727, 0.86624],
    [197, 0.148463636363636, 0.169781818181818, 0.86528],
    [198, 0.147081818181818, 0.168490909090909, 0.86432],
    [199, 0.1457, 0.1672, 0.86336],
    [200, 0.144318181818182, 0.165909090909091, 0.8624],
    [201, 0.142936363636364, 0.164618181818182, 0.86144],
    [202, 0.141554545454545, 0.163327272727273, 0.86048],
    [203, 0.140172727272727, 0.162036363636364, 0.85952],
    [204, 0.138790909090909, 0.160745454545455, 0.85856],
    [205, 0.137409090909091, 0.159454545454545, 0.8576],
    [206, 0.136027272727273, 0.158163636363636, 0.85664],
    [207, 0.134645454545455, 0.156872727272727, 0.85568],
    [208, 0.133263636363636, 0.155581818181818, 0.85472],
    [209, 0.131881818181818, 0.154290909090909, 0.85376],
    [210, 0.1305, 0.153, 0.8528],
    [211, 0.12991, 0.1525, 0.85155],
    [212, 0.12932, 0.152, 0.8503],
    [213, 0.12873, 0.1515, 0.84905],
    [214, 0.12814, 0.151, 0.8478],
    [215, 0.12755, 0.1505, 0.84655],
    [216, 0.12696, 0.15, 0.8453],
    [217, 0.12637, 0.1495, 0.84405],
    [218, 0.12578, 0.149, 0.8428],
    [219, 0.12519, 0.1485, 0.84155],
    [220, 0.1246, 0.148, 0.8403],
    [221, 0.12411, 0.1477, 0.839],
    [222, 0.12362, 0.1474, 0.8377],
    [223, 0.12313, 0.1471, 0.8364],
    [224, 0.12264, 0.1468, 0.8351],
    [225, 0.12215, 0.1465, 0.8338],
    [226, 0.12166, 0.1462, 0.8325],
    [227, 0.12117, 0.1459, 0.8312],
    [228, 0.12068, 0.1456, 0.8299],
    [229, 0.12019, 0.1453, 0.8286],
    [230, 0.1197, 0.145, 0.8273],
    [231, 0.11921, 0.1446, 0.82593],
    [232, 0.11872, 0.1442, 0.82456],
    [233, 0.11823, 0.1438, 0.82319],
    [234, 0.11774, 0.1434, 0.82182],
    [235, 0.11725, 0.143, 0.82045],
    [236, 0.11676, 0.1426, 0.81908],
    [237, 0.11627, 0.1422, 0.81771],
    [238, 0.11578, 0.1418, 0.81634],
    [239, 0.11529, 0.1414, 0.81497],
    [240, 0.1148, 0.141, 0.8136],
    [241, 0.11431, 0.1406, 0.81214],
    [242, 0.11382, 0.1402, 0.81068],
    [243, 0.11333, 0.1398, 0.80922],
    [244, 0.11284, 0.1394, 0.80776],
    [245, 0.11235, 0.139, 0.8063],
    [246, 0.11186, 0.1386, 0.80484],
    [247, 0.11137, 0.1382, 0.80338],
    [248, 0.11088, 0.1378, 0.80192],
    [249, 0.11039, 0.1374, 0.80046],
    [250, 0.1099, 0.137, 0.799],
    [251, 0.1095, 0.1368, 0.7975],
    [252, 0.1091, 0.1366, 0.796],
    [253, 0.1087, 0.1364, 0.7945],
    [254, 0.1083, 0.1362, 0.793],
    [255, 0.1079, 0.136, 0.7915],
    [256, 0.1075, 0.1358, 0.79],
    [257, 0.1071, 0.1356, 0.7885],
    [258, 0.1067, 0.1354, 0.787],
    [259, 0.1063, 0.1352, 0.7855],
    [260, 0.1059, 0.135, 0.784],
    [261, 0.10551, 0.1348, 0.78239],
    [262, 0.10512, 0.1346, 0.78078],
    [263, 0.10473, 0.1344, 0.77917],
    [264, 0.10434, 0.1342, 0.77756],
    [265, 0.10395, 0.134, 0.77595],
    [266, 0.10356, 0.1338, 0.77434],
    [267, 0.10317, 0.1336, 0.77273],
    [268, 0.10278, 0.1334, 0.77112],
    [269, 0.10239, 0.1332, 0.76951],
    [270, 0.102, 0.133, 0.7679],
    [271, 0.10161, 0.1328, 0.76618],
    [272, 0.10122, 0.1326, 0.76446],
    [273, 0.10083, 0.1324, 0.76274],
    [274, 0.10044, 0.1322, 0.76102],
    [275, 0.10005, 0.132, 0.7593],
    [276, 0.09966, 0.1318, 0.75758],
    [277, 0.09927, 0.1316, 0.75586],
    [278, 0.09888, 0.1314, 0.75414],
    [279, 0.09849, 0.1312, 0.75242],
    [280, 0.0981, 0.131, 0.7507],
    [281, 0.09771, 0.1308, 0.74886],
    [282, 0.09732, 0.1306, 0.74702],
    [283, 0.09693, 0.1304, 0.74518],
    [284, 0.09654, 0.1302, 0.74334],
    [285, 0.09615, 0.13, 0.7415],
    [286, 0.09576, 0.1298, 0.73966],
    [287, 0.09537, 0.1296, 0.73782],
    [288, 0.09498, 0.1294, 0.73598],
    [289, 0.09459, 0.1292, 0.73414],
    [290, 0.0942, 0.129, 0.7323],
    [291, 0.0939, 0.1289, 0.73032],
    [292, 0.0936, 0.1288, 0.72834],
    [293, 0.0933, 0.1287, 0.72636],
    [294, 0.093, 0.1286, 0.72438],
    [295, 0.0927, 0.1285, 0.7224],
    [296, 0.0924, 0.1284, 0.72042],
    [297, 0.0921, 0.1283, 0.71844],
    [298, 0.0918, 0.1282, 0.71646],
    [299, 0.0915, 0.1281, 0.71448],
    [300, 0.0912, 0.128, 0.7125],
    [301, 0.09091, 0.128, 0.71036],
    [302, 0.09062, 0.128, 0.70822],
    [303, 0.09033, 0.128, 0.70608],
    [304, 0.09004, 0.128, 0.70394],
    [305, 0.08975, 0.128, 0.7018],
    [306, 0.08946, 0.128, 0.69966],
    [307, 0.08917, 0.128, 0.69752],
    [308, 0.08888, 0.128, 0.69538],
    [309, 0.08859, 0.128, 0.69324],
    [310, 0.0883, 0.128, 0.6911],
    [311, 0.088, 0.128, 0.6887],
    [312, 0.0877, 0.128, 0.6863],
    [313, 0.0874, 0.128, 0.6839],
    [314, 0.0871, 0.128, 0.6815],
    [315, 0.0868, 0.128, 0.6791],
    [316, 0.0865, 0.128, 0.6767],
    [317, 0.0862, 0.128, 0.6743],
    [318, 0.0859, 0.128, 0.6719],
    [319, 0.0856, 0.128, 0.6695],
    [320, 0.0853, 0.128, 0.6671],
    [321, 0.08491, 0.1279, 0.66441],
    [322, 0.08452, 0.1278, 0.66172],
    [323, 0.08413, 0.1277, 0.65903],
    [324, 0.08374, 0.1276, 0.65634],
    [325, 0.08335, 0.1275, 0.65365],
    [326, 0.08296, 0.1274, 0.65096],
    [327, 0.08257, 0.1273, 0.64827],
    [328, 0.08218, 0.1272, 0.64558],
    [329, 0.08179, 0.1271, 0.64289],
    [330, 0.0814, 0.127, 0.6402],
    [331, 0.08101, 0.127, 0.63719],
    [332, 0.08062, 0.127, 0.63418],
    [333, 0.08023, 0.127, 0.63117],
    [334, 0.07984, 0.127, 0.62816],
    [335, 0.07945, 0.127, 0.62515],
    [336, 0.07906, 0.127, 0.62214],
    [337, 0.07867, 0.127, 0.61913],
    [338, 0.07828, 0.127, 0.61612],
    [339, 0.07789, 0.127, 0.61311],
    [340, 0.0775, 0.127, 0.6101],
    [341, 0.07701, 0.1269, 0.60653],
    [342, 0.07652, 0.1268, 0.60296],
    [343, 0.07603, 0.1267, 0.59939],
    [344, 0.07554, 0.1266, 0.59582],
    [345, 0.07505, 0.1265, 0.59225],
    [346, 0.07456, 0.1264, 0.58868],
    [347, 0.07407, 0.1263, 0.58511],
    [348, 0.07358, 0.1262, 0.58154],
    [349, 0.07309, 0.1261, 0.57797],
    [350, 0.0726, 0.126, 0.5744],
    [351, 0.07201, 0.126, 0.56976],
    [352, 0.07142, 0.126, 0.56512],
    [353, 0.07083, 0.126, 0.56048],
    [354, 0.07024, 0.126, 0.55584],
    [355, 0.06965, 0.126, 0.5512],
    [356, 0.06906, 0.126, 0.54656],
    [357, 0.06847, 0.126, 0.54192],
    [358, 0.06788, 0.126, 0.53728],
    [359, 0.06729, 0.126, 0.53264],
    [360, 0.0667, 0.126, 0.528],
    [361, 0.06572, 0.126, 0.52025],
    [362, 0.06474, 0.126, 0.5125],
    [363, 0.06376, 0.126, 0.50475],
    [364, 0.06278, 0.126, 0.497],
    [365, 0.0618, 0.126, 0.48925],
    [366, 0.06082, 0.126, 0.4815],
    [367, 0.05984, 0.126, 0.47375],
    [368, 0.05886, 0.126, 0.466],
    [369, 0.05788, 0.126, 0.45825],
    [370, 0.0569, 0.126, 0.4505],
  ];

  const datachart = {
    labels,
    datasets: [
      {
        label: "Viscosity (mPa⋅s)",
        data: viscosityData,
        fill: false,
        borderColor: "rgb(75, 192, 192)",
        tension: 0.1,
        pointRadius: 0,
      },
      // Aap yahan second aur third dataset bhi add kar sakte hain (mm²/s, g/cm³)
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
      },
      tooltip: {
        mode: "index",
        intersect: false,
      },
      datalabels: {
        display: false, // ✅ Disable value labels on bars
      },
    },
    scales: {
      x: {
        title: {
          display: true,
          text: "Temperature (°C)", // Optional
        },
      },
      y: {
        title: {
          display: true,
          text: "Values",
        },
      },
    },
  };

   // majax
  useEffect(() => {
    const script = document.createElement("script");
    script.src =
      "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS_HTML";
    script.async = true;
    script.type = "text/javascript";
    script.onload = () => {
      window.MathJax &&
        window.MathJax.Hub.Queue(["Typeset", window.MathJax.Hub]);
    };
    document.head.appendChild(script);

    return () => {
      document.head.removeChild(script);
    };
  }, [result]);
// majax



  return (
    <Calculator
      isLoading={isLoading}
      data={data}
      links={[
        { name: "Home", path: "/" },
        {
          name: data?.payload?.tech_cal_cat,
          path: "/" + data?.payload?.tech_cal_cat,
        },
        {
          name: data?.payload?.tech_calculator_title,
          path: location.pathname, // This will use the current path dynamically
        },
      ]}
    >
      <form className="row" onSubmit={handleSubmit}>
        <div className="w-full mx-auto p-4 lg:p-8 md:p-8 input_form rounded-lg space-y-6 mb-3">
          {formError && (
            <p className="text-red-500 text-lg font-semibold w-full">
              {formError}
            </p>
          )}

          <div className="lg:w-[40%] md:w-[60%] w-full mx-auto ">
            <div className="grid grid-cols-1 mt-3  gap-4">
              <div className="space-y-2 mt-0 mt-lg-2 ">
                <label htmlFor="tech_temp" className="label">
                  {data?.payload?.tech_lang_keys["1"]}
                </label>
                <div className="relative w-full ">
                  <input
                    type="number"
                    name="tech_temp"
                    step="any"
                    className="mt-1 input"
                    value={formData.tech_temp}
                    placeholder="00"
                    onChange={handleChange}
                  />
                  <label
                    className="absolute cursor-pointer text-sm underline right-6 top-4"
                    onClick={toggleDropdown}
                  >
                    {formData.tech_unit} ▾
                  </label>
                  {dropdownVisible && (
                    <div className="absolute z-10 bg-white border border-gray-300 rounded-md w-auto mt-1 right-0">
                      {[
                        { label: "°C", value: "c" },
                        { label: "°F", value: "f" },
                        { label: "K", value: "k" },
                      ].map((unit, index) => (
                        <p
                          key={index}
                          className="p-2 hover:bg-gray-100 cursor-pointer"
                          onClick={() => setUnitHandler(unit.value)}
                        >
                          {unit.label}
                        </p>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          <div className="mb-6 mt-10 text-center space-x-2">
            <Button type="submit" isLoading={roundToTheNearestLoading}>
              {data?.payload?.tech_lang_keys["calculate"]}
            </Button>
            {result && (
              <ResetButton type="button" onClick={handleReset}>
                {data?.payload?.tech_lang_keys["locale"] === "en"
                  ? "RESET"
                  : data?.payload?.tech_lang_keys["reset"] || "RESET"}
              </ResetButton>
            )}
          </div>
        </div>
        {roundToTheNearestLoading ? (
          <div className="w-full mx-auto p-4 lg:p-8 md:p-8 result_calculator rounded-lg space-y-6 result">
            <div className="animate-pulse">
              <div className=" w-full h-[30px] bg-gray-300 animate-pulse rounded-[10px] mb-4"></div>
              <div className="w-[75%] h-[20px] bg-gray-300 animate-pulse rounded-[10px] mb-3"></div>
              <div className="w-[50%] h-[20px] bg-gray-300 animate-pulse rounded-[10px] mb-3"></div>
              <div className="w-[25%] h-[20px] bg-gray-300 animate-pulse rounded-[10px]"></div>
            </div>
          </div>
        ) : (
          result && (
            <>
              <div className="w-full mx-auto p-4 lg:p-8 md:p-8 result_calculator rounded-lg space-y-6 result">
                <div>
                  <ResultActions lang={data?.payload?.tech_lang_keys} />

                  <div className="rounded-lg  flex items-center justify-center">
                    <div className="w-full  mt-3">
                      <div className="w-full md:w-[60%] lg:w-[60%]  mt-2">
                        <table className="w-full font-s-18">
                          <tr>
                            <td className="py-2 border-b" width="70%">
                              <strong>
                                {data?.payload?.tech_lang_keys[2]} , η{" "}
                              </strong>
                            </td>
                            <td className="py-2 border-b">
                              {" "}
                              {Number(result?.tech_ans).toFixed(4)} mPa.s
                            </td>
                          </tr>
                          <tr>
                            <td className="py-2 border-b" width="70%">
                              <strong>
                                {data?.payload?.tech_lang_keys[3]} , v{" "}
                              </strong>
                            </td>
                            <td className="py-2 border-b">
                              {" "}
                              {Number(result?.tech_ans1).toFixed(4)} mm²/s
                            </td>
                          </tr>
                          <tr>
                            <td className="py-2 border-b" width="70%">
                              <strong>
                                {data?.payload?.tech_lang_keys[4]}
                              </strong>
                            </td>
                            <td className="py-2 border-b">
                              {" "}
                              {Number(result?.tech_ans2).toFixed(4)} g/cm³
                            </td>
                          </tr>
                        </table>
                      </div>
                      <div className="w-full px-2">
                        <Line data={datachart} options={options} />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          )
        )}
      </form>
      {result && (
        <CalculatorFeedback calName={data?.payload?.tech_calculator_title} />
      )}
    </Calculator>
  );
};

export default WaterViscosityCalculator;
